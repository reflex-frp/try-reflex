diff --git a/Data/Hashable/Class.hs b/Data/Hashable/Class.hs
index cc9fb87..bdf9cb1 100644
--- a/Data/Hashable/Class.hs
+++ b/Data/Hashable/Class.hs
@@ -2,6 +2,9 @@
              ScopedTypeVariables, UnliftedFFITypes, DeriveDataTypeable,
              DefaultSignatures, FlexibleContexts, TypeFamilies,
              MultiParamTypeClasses #-}
+#ifdef __GHCJS__
+{-# LANGUAGE JavaScriptFFI, UnboxedTuples, GHCForeignImportPrim #-}
+#endif
 
 #if __GLASGOW_HASKELL__ >= 801
 {-# LANGUAGE PolyKinds #-} -- For TypeRep instances
@@ -69,7 +72,9 @@ import Data.Int (Int8, Int16, Int32, Int64)
 import Data.List (foldl')
 import Data.Ratio (Ratio, denominator, numerator)
 import qualified Data.Text as T
+#ifndef __GHCJS__
 import qualified Data.Text.Array as TA
+#endif
 import qualified Data.Text.Internal as T
 import qualified Data.Text.Lazy as TL
 import Data.Version (Version(..))
@@ -84,6 +89,9 @@ import GHC.Prim (ThreadId#)
 import System.IO.Unsafe (unsafeDupablePerformIO)
 import System.Mem.StableName
 import Data.Unique (Unique, hashUnique)
+#ifdef __GHCJS__
+import Data.JSString (JSString)
+#endif
 
 -- As we use qualified F.Foldable, we don't get warnings with newer base
 import qualified Data.Foldable as F
@@ -146,7 +154,11 @@ import qualified Data.ByteString.Short.Internal as BSI
 #  define MIN_VERSION_integer_gmp_1_0_0
 # endif
 
+#ifndef __GHCJS__
 import GHC.Exts (Int(..))
+#else
+import GHC.Exts (Int(..), Int#)
+#endif
 import GHC.Integer.GMP.Internals (Integer(..))
 # if defined(MIN_VERSION_integer_gmp_1_0_0)
 import GHC.Exts (sizeofByteArray#)
@@ -639,9 +651,15 @@ instance Hashable BSI.ShortByteString where
 #endif
 
 instance Hashable T.Text where
+#ifndef __GHCJS__
     hashWithSalt salt (T.Text arr off len) =
         hashByteArrayWithSalt (TA.aBA arr) (off `shiftL` 1) (len `shiftL` 1)
         salt
+#else
+    hashWithSalt salt (T.Text txt) =
+        let (# ba, len #) = js_textFromJSString txt
+        in hashByteArrayWithSalt ba (0 `shiftL` 1) (I# len `shiftL` 1) salt
+#endif
 
 instance Hashable TL.Text where
     hashWithSalt = TL.foldlChunks hashWithSalt
@@ -851,6 +869,12 @@ instance Hashable a => Hashable (Option a) where
     hashWithSalt p (Option a) = hashWithSalt p a
 #endif
 
+#ifdef __GHCJS__
+foreign import javascript unsafe
+  "h$textFromString"
+  js_textFromJSString :: JSString -> (# ByteArray#, Int# #)
+#endif
+
 -- instances for @Data.Functor.{Product,Sum,Compose}@, present
 -- in base-4.9 and onward.
 #if MIN_VERSION_base(4,9,0)
diff --git a/hashable.cabal b/hashable.cabal
index e19d056..e442956 100644
--- a/hashable.cabal
+++ b/hashable.cabal
@@ -57,6 +57,8 @@ Library
                    , text       >= 0.12     && < 1.3
                    , ghc-prim
 
+  if impl(ghcjs)
+    Build-depends:   ghcjs-base
   if flag(integer-gmp)
     Build-depends:   integer-gmp >= 0.4 && < 1.1
   else
